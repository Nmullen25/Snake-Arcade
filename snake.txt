SNAKE
As a user playing the game I want to:

start the game by pressing a Start button
use my arrow keys to change the direction of the snake
have the snake grow correctly when it eats the apple
have the game end if the snake tries to eat itself
have the game end if the snake runs into a wall
see how long my snake was when the game ended
start the game over without having to reset the browser

As a user playing the game I would be delighted if I:

can set the difficulty (speed of snake)
can keep track of my stats (maximum points, average points, etc.) between games

start:
    -empty 11 x 11 board with the apple in the middle, start the snake at 6,2
    -press start button and have the snake move up the board
    -start the snake at 3 blocks long
    -when the apple is eaten:
        -check if the apple and the head are in the same square: apple is eaten
        -push that index location to the snake
    -use a snake.length to display the length of the snake
    
    -to move the snake:
        -take the 0 index of the snake and append it to the end of the list with the head location
        to simulate movement
        -look for arrow key inputs for the snake movement:
            -if the down arrow is pressed, the y index shall decrease by 1 each tick
            -if the left arrow is pressed, the x index shall decrease by 1 each tick
            -if the up arrow is pressed, the y index shall increase by 1 each tick
            -if the right arrow is pressed, the x index shall increase by 1 each tick
    
    -checking for gameover events:
        -check if the head square is in the snake array to see if it bit itself
        -check if the head square is out of the range
        -stop the interval timer after the gameover event and leave the snake on screen
        -change snake color to red

    -building the board:
        -hard code the size in html and css or use javascript to create the board?
            -use the pixelate files and loop through for the rows
        -apple will always start at 6,8
        -render the board after each step?
        -make the board one bigger all around to act as a boarder?
        -start at 1,1 and go to 11,11

    -use a timer function to set the speed of the snake
        -add a dropdown menu to change the speed
    
    -extras:
        -use a counter to keep track of number of games
        -display the highest score and the average score


-moving the snake idea:
    -use 100 divs in a flex wrap, 
        -if the up key is pressed, the head moves -10
        -if the down key is pressed, the head moves +10
        -if the right key is pressed, the head moves +1
        -if the left key is pressed, the head moves -1

         0   1   2   3   4   5   6   7   8   9  10  11
        12  13  14  15  16  17  18  19  20  21  22  23
        24  25  26  27  28  29  30  31  32  33  34  35
        36  37  38  39  40  41  42  43  44  45  46  47
        48  49  50  51  52  53  54  55  56  57  58  59
        60  61  62  63  64  65  66  67  68  69  70  71
        72  73  74  75  76  77  78  79  80  81  82  83
        84  85  86  87  88  89  90  91  92  93  94  95
        96  97  98  99 100 101 102 103 104 105 106 107
       108 109 110 111 112 113 114 115 116 117 118 119
       120 121 122 123 124 125 126 127 128 129 130 131
       132 133 134 135 136 137 138 139 140 141 142 143

OLD CODE

// let gameBoard = []
// function createBoard () {
    
//     for (let i = 0; i < 20; i++) {
//         let row = []
//         gameBoard.push(row);
//         for (let j = 0; j < 20; j++){
//             row.push([i, j])
//         }
//     }
// }
// createBoard();



// // game nested array and indexes //
// [
//     [[ 0, 0 ], [ 0, 1 ], [ 0, 2 ], [ 0, 3 ], [ 0, 4 ], [ 0, 5 ], [ 0, 6 ], [ 0, 7 ], [ 0, 8 ], [ 0, 9 ]],
//     [[ 1, 0 ], [ 1, 1 ], [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 1, 6 ], [ 1, 7 ], [ 1, 8 ], [ 1, 9 ]],
//     [[ 2, 0 ], [ 2, 1 ], [ 2, 2 ], [ 2, 3 ], [ 2, 4 ], [ 2, 5 ], [ 2, 6 ], [ 2, 7 ], [ 2, 8 ], [ 2, 9 ]],
//     [[ 3, 0 ], [ 3, 1 ], [ 3, 2 ], [ 3, 3 ], [ 3, 4 ], [ 3, 5 ], [ 3, 6 ], [ 3, 7 ], [ 3, 8 ], [ 3, 9 ]],
//     [[ 4, 0 ], [ 4, 1 ], [ 4, 2 ], [ 4, 3 ], [ 4, 4 ], [ 4, 5 ], [ 4, 6 ], [ 4, 7 ], [ 4, 8 ], [ 4, 9 ]],
//     [[ 5, 0 ], [ 5, 1 ], [ 5, 2 ], [ 5, 3 ], [ 5, 4 ], [ 5, 5 ], [ 5, 6 ], [ 5, 7 ], [ 5, 8 ], [ 5, 9 ]],
//     [[ 6, 0 ], [ 6, 1 ], [ 6, 2 ], [ 6, 3 ], [ 6, 4 ], [ 6, 5 ], [ 6, 6 ], [ 6, 7 ], [ 6, 8 ], [ 6, 9 ]],
//     [[ 7, 0 ], [ 7, 1 ], [ 7, 2 ], [ 7, 3 ], [ 7, 4 ], [ 7, 5 ], [ 7, 6 ], [ 7, 7 ], [ 7, 8 ], [ 7, 9 ]],
//     [[ 8, 0 ], [ 8, 1 ], [ 8, 2 ], [ 8, 3 ], [ 8, 4 ], [ 8, 5 ], [ 8, 6 ], [ 8, 7 ], [ 8, 8 ], [ 8, 9 ]],
//     [[ 9, 0 ], [ 9, 1 ], [ 9, 2 ], [ 9, 3 ], [ 9, 4 ], [ 9, 5 ], [ 9, 6 ], [ 9, 7 ], [ 9, 8 ], [ 9, 9 ]]
// ]


// countdown clock code

let timeRemaining = 5;
let alertArea = document.getElementById("alert-area");

function countdown() {
  timeRemaining -= 1;
  timerElement.innerText = timeRemaining;
  if (timeRemaining <= 0) {
    timerElement.innerText = "Go!"
  } else {
    timerElement.innerText = timeRemaining
  }
}

setInterval(countdown, 1000);


// window.addEventListener('keydown', event => {
//     switch (event.key) {
//         case "ArrowUp":
//             console.log("ArrowUp");
//             nextDir = (-20);
//             break;

//         case "ArrowDown":
//             console.log("ArrowDown");
//             nextDir = (+20);
//             break;

//         case "ArrowLeft":
//             console.log("ArrowLeft");
//             nextDir = (-1);
//             break;

//         case "ArrowRight":
//             console.log("ArrowRight");
//             nextDir = (+1);
//             break;
//         default:
//             break;
//     }

// });